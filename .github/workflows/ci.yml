# .github/workflows/ci.yml
name: Conniption CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Run backend tests
        working-directory: backend
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          R2_ACCOUNT_ID: test-account
          R2_ACCESS_KEY_ID: test-key
          R2_SECRET_ACCESS_KEY: test-secret
          R2_BUCKET_NAME: test-bucket
          R2_PUBLIC_URL: https://test.r2.dev
          SESSION_SECRET: test-session-secret

      - name: Generate coverage report
        working-directory: backend
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage/
          flags: backend

  test-frontend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend unit tests
        working-directory: frontend
        run: npm test -- --watchAll=false

      - name: Generate coverage report
        working-directory: frontend
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage/
          flags: frontend

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'pull_request'

    strategy:
      matrix:
        node-version: [18.x]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Start backend server
        working-directory: backend
        run: |
          npm start &
          sleep 5
        env:
          NODE_ENV: test
          PORT: 5000
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          R2_ACCOUNT_ID: test-account
          R2_ACCESS_KEY_ID: test-key
          R2_SECRET_ACCESS_KEY: test-secret
          R2_BUCKET_NAME: test-bucket
          R2_PUBLIC_URL: https://test.r2.dev
          SESSION_SECRET: test-session-secret

      - name: Run Cypress tests
        working-directory: frontend
        run: npm run test:e2e
        env:
          REACT_APP_API_URL: http://localhost:5000

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Render
        uses: JorgeLNJunior/render-deploy@v1.4.3
        with:
          service_id: ${{ secrets.RENDER_SERVICE_ID_BACKEND }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          wait_deploy: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          REACT_APP_API_URL: https://conniption.onrender.com

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy frontend/build --project-name conniption
